// <auto-generated />
using System;
using AfsluttendeProjektH3API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AfsluttendeProjektH3API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513092036_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Artist", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateOnly>("DateOfBirth")
                    .HasColumnType("date");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Nationality")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Artists");
            });

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Author", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateOnly>("DateOfBirth")
                    .HasColumnType("date");

                b.Property<string>("FirstName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LastPublishedBook")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Nationality")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("NumberOfBooksPublished")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("Authors");
            });

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Book", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("AuthorId")
                    .HasColumnType("int");

                b.Property<double>("BasePrice")
                    .HasColumnType("float");

                b.Property<string>("Genre")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("NumberOfPages")
                    .HasColumnType("int");

                b.Property<DateTime>("PublishedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("AuthorId");

                b.ToTable("Books");
            });

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Cover", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("BookId")
                    .HasColumnType("int");

                b.Property<bool>("DigitalOnly")
                    .HasColumnType("bit");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("BookId");

                b.ToTable("Covers");
            });

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Book", b =>
            {
                b.HasOne("AfsluttendeProjektH3API.Domain.Entities.Author", "Author")
                    .WithMany()
                    .HasForeignKey("AuthorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Author");
            });

            modelBuilder.Entity("AfsluttendeProjektH3API.Domain.Entities.Cover", b =>
            {
                b.HasOne("AfsluttendeProjektH3API.Domain.Entities.Book", "Book")
                    .WithMany()
                    .HasForeignKey("BookId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Book");
            });
#pragma warning restore 612, 618
        }
    }
}